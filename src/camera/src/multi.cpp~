
#include <string>
#include <cv.h>
#include <highgui.h>


#include <sstream>
#include <string>
#include <iostream>
#include <vector>

//Includes all the headers necessary to use the most common public pieces of the ROS system.
#include <ros/ros.h>
//Use image_transport for publishing and subscribing to images in ROS
#include <image_transport/image_transport.h>
//Use cv_bridge to convert between ROS and OpenCV Image formats
#include <cv_bridge/cv_bridge.h>
//Include some useful constants for image encoding. Refer to: http://www.ros.org/doc/api/sensor_msgs/html/namespacesensor__msgs_1_1image__encodings.html for more info.
#include <sensor_msgs/image_encodings.h>
//Include headers for OpenCV Image processing
#include <opencv2/imgproc/imgproc.hpp>
//Include headers for OpenCV GUI handling
#include <opencv2/highgui/highgui.hpp>
#include "object.h"

using namespace std;
using namespace cv;
namespace enc = sensor_msgs::image_encodings;

#include "Object.h"
Object::Object()
{
//set values for default constructor
setType("Object");
setColor(Scalar(0,0,0));
}
Object::Object(string name){
setType(name);
if(name=="blue"){
//TODO: use "calibration mode" to find HSV min
//and HSV max values
setHSVmin(Scalar(92,0,0));
setHSVmax(Scalar(124,256,256));
//BGR value for Green:
setColor(Scalar(255,0,0));
}
if(name=="green"){
//TODO: use "calibration mode" to find HSV min
//and HSV max values
setHSVmin(Scalar(34,50,50));
setHSVmax(Scalar(80,220,200));
//BGR value for Yellow:
setColor(Scalar(0,255,0));
}
if(name=="yellow"){
//TODO: use "calibration mode" to find HSV min
//and HSV max values
setHSVmin(Scalar(20,124,123));
setHSVmax(Scalar(30,256,256));
//BGR value for Red:
setColor(Scalar(0,255,255));
}
if(name=="red"){
//TODO: use "calibration mode" to find HSV min
//and HSV max values
setHSVmin(Scalar(0,200,0));
setHSVmax(Scalar(19,255,255));
//BGR value for Red:
setColor(Scalar(0,0,255));
}
}
Object::~Object(void)
{
}
int Object::getXPos(){
return Object::xPos;
}
void Object::setXPos(int x){
Object::xPos = x;
}
int Object::getYPos(){
return Object::yPos;
}
void Object::setYPos(int y){
Object::yPos = y;
}
Scalar Object::getHSVmin(){
return Object::HSVmin;
}
Scalar Object::getHSVmax(){
return Object::HSVmax;
}
void Object::setHSVmin(Scalar min){
Object::HSVmin = min;
}
void Object::setHSVmax(Scalar max){
Object::HSVmax = max;
}




	

//initial min and max HSV filter values.
//these will be changed using trackbars
int H_MIN = 0;
int H_MAX = 256;
int S_MIN = 0;
int S_MAX = 256;
int V_MIN = 0;
int V_MAX = 256;
//default capture width and height
const int FRAME_WIDTH = 640;
const int FRAME_HEIGHT = 480;
//max number of objects to be detected in frame
const int MAX_NUM_OBJECTS=50;
//minimum and maximum object area
const int MIN_OBJECT_AREA = 20*20;
const int MAX_OBJECT_AREA = FRAME_HEIGHT*FRAME_WIDTH/1.5;
//names that will appear at the top of each window
const string windowName = "Original Image";
const string windowName1 = "HSV Image";
const string windowName2 = "Thresholded Image";
const string windowName3 = "After Morphological Operations";
const string trackbarWindowName = "Trackbars";
//The following for canny edge detec
Mat dst, detected_edges;
Mat src, src_gray;
int edgeThresh = 1;
int lowThreshold;
int const max_lowThreshold = 100;
int ratio = 3;
int kernel_size = 3;
char* window_name = "Edge Map";





void on_trackbar( int, void* )
{//This function gets called whenever a
// trackbar position is changed
}



string intToString(int number)
{
	std::stringstream ss;
	ss << number;
	return ss.str();
}



void createTrackbars(){
//create window for trackbars
namedWindow(trackbarWindowName,0);
//create memory to store trackbar name on window
char TrackbarName[50];
sprintf( TrackbarName, "H_MIN", H_MIN);
sprintf( TrackbarName, "H_MAX", H_MAX);
sprintf( TrackbarName, "S_MIN", S_MIN);
sprintf( TrackbarName, "S_MAX", S_MAX);
sprintf( TrackbarName, "V_MIN", V_MIN);
sprintf( TrackbarName, "V_MAX", V_MAX);
//create trackbars and insert them into window
//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
//the max value the trackbar can move (eg. H_HIGH),
//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
// ----> ----> ---->
createTrackbar( "H_MIN", trackbarWindowName, &H_MIN, H_MAX, on_trackbar );
createTrackbar( "H_MAX", trackbarWindowName, &H_MAX, H_MAX, on_trackbar );
createTrackbar( "S_MIN", trackbarWindowName, &S_MIN, S_MAX, on_trackbar );
createTrackbar( "S_MAX", trackbarWindowName, &S_MAX, S_MAX, on_trackbar );
createTrackbar( "V_MIN", trackbarWindowName, &V_MIN, V_MAX, on_trackbar );
createTrackbar( "V_MAX", trackbarWindowName, &V_MAX, V_MAX, on_trackbar );
}


void drawObject(vector<Object> theObjects,Mat &frame, Mat &temp, vector< vector<Point> > contours, vector<Vec4i> hierarchy)
{
	for(int i =0; i<theObjects.size(); i++){
	cv::drawContours(frame,contours,i,theObjects.at(i).getColor(),3,8,hierarchy);
	cv::circle(frame,cv::Point(theObjects.at(i).getXPos(),theObjects.at(i).getYPos()),5,theObjects.at(i).getColor());
	cv::putText(frame,intToString(theObjects.at(i).getXPos())+ " , " + intToString(theObjects.at(i).getYPos()),cv::Point(theObjects.at(i).getXPos(),theObjects.at(i).getYPos()+20),1,1,theObjects.at(i).getColor());
	cv::putText(frame,theObjects.at(i).getType(),cv::Point(theObjects.at(i).getXPos(),theObjects.at(i).getYPos()-20),1,2,theObjects.at(i).getColor());
	}
}

	void morphOps(Mat &thresh)
{
	//create structuring element that will be used to "dilate" and "erode" image.
	//the element chosen here is a 3px by 3px rectangle
	Mat erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
	//dilate with larger element so make sure object is nicely visible
	Mat dilateElement = getStructuringElement( MORPH_RECT,Size(8,8));
	erode(thresh,thresh,erodeElement);
	erode(thresh,thresh,erodeElement);
	dilate(thresh,thresh,dilateElement);
	dilate(thresh,thresh,dilateElement);
}


void trackFilteredObject(Object theObject,Mat threshold,Mat HSV, Mat &cameraFeed)
{
	vector <Object> objects;
	Mat temp;
	threshold.copyTo(temp);
	//these two vectors needed for output of findContours
	vector< vector<Point> > contours;
	vector<Vec4i> hierarchy;
	//find contours of filtered image using openCV findContours function
	findContours(temp,contours,hierarchy,CV_RETR_CCOMP,CV_CHAIN_APPROX_SIMPLE );
	//use moments method to find our filtered object
	double refArea = 0;
	bool objectFound = false;
	if (hierarchy.size() > 0) {
	int numObjects = hierarchy.size();
	//if number of objects greater than MAX_NUM_OBJECTS we have a noisy filter
	if(numObjects<MAX_NUM_OBJECTS){
	for (int index = 0; index >= 0; index = hierarchy[index][0]) {
	Moments moment = moments((cv::Mat)contours[index]);
	double area = moment.m00;
	//if the area is less than 20 px by 20px then it is probably just noise
	//if the area is the same as the 3/2 of the image size, probably just a bad filter
	//we only want the object with the largest area so we safe a reference area each
	//iteration and compare it to the area in the next iteration.
	if(area>MIN_OBJECT_AREA){
	Object object;
	object.setXPos(moment.m10/area);
	object.setYPos(moment.m01/area);
	object.setType(theObject.getType());
	object.setColor(theObject.getColor());
	objects.push_back(object);
	objectFound = true;
	}else objectFound = false;
	}
	//let user know you found an object
	if(objectFound ==true){
	//draw object location on screen
	drawObject(objects,cameraFeed,temp,contours,hierarchy);}
	}else putText(cameraFeed,"TOO MUCH NOISE! ADJUST FILTER",Point(0,50),1,2,Scalar(0,0,255),2);
	}
}


int callback(const sensor_msgs::ImageConstPtr& original_image)
{

	cv_bridge::CvImagePtr cv_ptr;



	   try
	{
	//Always copy, returning a mutable CvImage
	//OpenCV expects color images to use BGR channel order.
	cv_ptr = cv_bridge::toCvCopy(original_image, enc::BGR8);
	}
	catch (cv_bridge::Exception& e)
	{
	//if there is an error during conversion, display it
	ROS_ERROR("tutorialROSOpenCV::main.cpp::cv_bridge exception: %s", e.what());
	return 0;
	}
	
	//if we would like to calibrate our filter values, set to true.
	bool calibrationMode = false;
	//Matrix to store each frame of the webcam feed
	Mat cameraFeed;
	Mat threshold;
	Mat HSV;




	if(calibrationMode){
	//create slider bars for HSV filtering
	createTrackbars();
	}
	



	src = cv_ptr->image;
	if( !src.data )
	{ return -1; }
	//convert frame from BGR to HSV colorspace
	cvtColor(cameraFeed,HSV,COLOR_BGR2HSV);

	Object blue, yellow, red, green;
	
	//create some temp fruit objects so that
	//we can use their member functions/information

	//first find blue objects
	cvtColor(cameraFeed,HSV,COLOR_BGR2HSV);
	inRange(HSV,blue.getHSVmin(),blue.getHSVmax(),threshold);
	morphOps(threshold);
	trackFilteredObject(blue,threshold,HSV,cameraFeed);
	//then yellows
	cvtColor(cameraFeed,HSV,COLOR_BGR2HSV);
	inRange(HSV,yellow.getHSVmin(),yellow.getHSVmax(),threshold);
	morphOps(threshold);
	trackFilteredObject(yellow,threshold,HSV,cameraFeed);
	//then reds
	cvtColor(cameraFeed,HSV,COLOR_BGR2HSV);
	inRange(HSV,red.getHSVmin(),red.getHSVmax(),threshold);
	morphOps(threshold);
	trackFilteredObject(red,threshold,HSV,cameraFeed);
	//then greens
	cvtColor(cameraFeed,HSV,COLOR_BGR2HSV);
	inRange(HSV,green.getHSVmin(),green.getHSVmax(),threshold);
	morphOps(threshold);
	trackFilteredObject(green,threshold,HSV,cameraFeed);
	

	imshow(windowName,cameraFeed);
	//imshow(windowName1,HSV);
	//delay 30ms so that screen can refresh.
	//image will not appear without this waitKey() command
	waitKey(30);
	

	return 0 ;



}










int main(int argc, char* argv[])
{


	ros::init(argc, argv, "image_processor");
	/**
	* NodeHandle is the main access point to communications with the ROS system.
	* The first NodeHandle constructed will fully initialize this node, and the last
	* NodeHandle destructed will close down the node.
	*/
	ros::NodeHandle nh;
	//Create an ImageTransport instance, initializing it with our NodeHandle.
	image_transport::ImageTransport it(nh);
	image_transport::Publisher pub;


	image_transport::Subscriber sub = it.subscribe("camera/rgb/image_raw", 1, callback);

	//cv::namedWindow("Original", CV_WINDOW_AUTOSIZE);
	pub = it.advertise("camera/image_processed", 1);


  	ros::spin();
}









































